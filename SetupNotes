
######## Setup

conda update -n base -c defaults conda
conda create -n django_env python=3.7
pip install django
pip install django-crispy-forms
pip install Pillow




####### Help

python -m django --version
django-admin  # opens up the list of commands
django-admin startproject django_project  # creates a new project called django_project
python manage.py runserver # run from within the project folder
python manage.py startapp blog # creates a new app (blog) within the project django_project


python manage.py migrate
python manage.py makemigrations
python manage.py createsuperuser  # DeepakS qwerty321!   ## created another user DineshS qwerty321!

python manage.py makemigrations
python manage.py sqlmigrate blog 0001
### BEGIN;
--
-- Create model Post
--
CREATE TABLE "blog_post" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(100) NOT NULL, "content" text NOT NULL, "date_posted" datetime NOT NULL, "author_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE INDEX "blog_post_author_id_dd7a8485" ON "blog_post" ("author_id");
COMMIT; 
###


python manage.py shell # to get a interactive django shell
'''
>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> user = User.objects.filter(username="DeepakS").first()
>>> user
<User: DeepakS>
>>> post_1 = Post(title='Blog 1', content='First Post Content!', author=user)
>>> post_1.save
<bound method Model.save of <Post: Blog 1>>
>>> post_1.save()
>>> user = User.objects.filter(username="DineshS").first()   
>>> user
<User: DineshS>
>>> post_2 = Post(title='Blog 2', content='Second Post Content!', author=user) 
>>> post_2.save()
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>]>
>>>
>>> Post.objects.all().first
<bound method QuerySet.first of <QuerySet [<Post: Blog 1>, <Post: Blog 2>]>>
>>> Post.objects.all().first()
<Post: Blog 1>
>>> print(Post.objects.all().first()) 
Blog 1
'''


########## How to deploy on a Linux Server ##########

apt-get update && apt-get upgrade # first time linux update in CLI
hostnamectl set-hostname django-server
hostname
nano /etc/hosts 
# and paste the  ip address of your server
# XXX.XXX.XXX.XXX	django-server

adduser coreyms
adduser coreyms sudo
exit

ssh coreyms@XXX.XXX.XXX.XXX

pwd
cd ~
mkdir -p ~/.ssh
ls -la

# go to local machine
ssh-keygen -b 4096
scp ~/.ssh/id_rsa.pub coreyms@XXX.XXX.XXX.XXX:~/.ssh/authorized_keys

# go to server
ls .ssh
sudo chmod 700 ~/.ssh/
sudo chmod 600 ~/.ssh/*
exit

#try logging in without password; should auto login ssh coreyms@XXX.XXX.XXX.XXX

# not allow root logins and password auths; only key based auth allowed
sudo nano /etc/ssh/sshd_config # change PermitRootLogin no & PasswordAuthentication no
sudo systemctl restart sshd

#firewall

sudo apt-get install ufw
sudo ufw default allow outgoing
sudo ufw default deny incoming
sudo ufw allow ssh
sudo ufw allow 8000
sudo ufe enable # y
sudo ufw status # check rules

# copy files this way or use git pull on server if you can
# go to env on local
pip freeze > requirements.txt
scp -r django_project  coreyms@XXX.XXX.XXX.XXX:~/

# go to server
cd ~
ls django_project

sudo apt-get install python3-pip
sudo apt-get install python3-venv
python3 -m venv django_project/venv
cd django_project/
source venv/bin/activate
pip install -r requirements.txt

sudo nano django_project/settings.py
# ALLOWED_HOSTS = ['XXX.XXX.XXX.XXX']
# add STATIC_ROOT = os.join.path(BASE_DIR, 'static')

python manage.py collectstatic
python manage.py runserver 0.0.0.0:8000
# Ctrl + C

cd ~
sudo apt-get install apache2
sudo apa-get install libapache2-mod-wsgi-py3

# configure apache server
cd /etc/apache2/sites-available/
ls
sudo cp 000-default.conf django_project.conf
sudo nano django_project.conf
"""
 Alias /static /home/coreyms/django_project/static
 <Directory  /home/coreyms/django_project/static
	Require all granted
 </Directory>

 Alias /media /home/coreyms/django_project/media
 <Directory  /home/coreyms/django_project/media
	Require all granted
 </Directory>


 <Directory  /home/coreyms/django_project/django_project>
	<Files wsgi.py>
		Require all granted
	</Files>
 </Directory>

 WSGIScriptAlias / /home/coreyms/django_project/django_project/wsgi.py
 WSGIDaemonProcess django_app python-path=/home/coreyms/django_project/venv
 WSGIProcessGroup django_app
 </VirtuaHost>
""" # save & exit nano

cd ~
sudo a2ensite django_project
sudo a2dissite 000-default.conf

sudo chown :www-data django_project/db.sqlite3
sudo chmod 664 dajngo_project/db.sqlite3
sudo chown :www-data django_project/

sudo chown -R :www-data django_project/media
sudo chmod -R 775 django_project/media

sudo chmod 775 django_project/

sudo touch /etc/config.json
sudo nano django_project/django_project/settings.py # copy SECRET_KEY and do not publicise on git/elsewhere and replace with ''
sudo nano /etc/config.json
# create a json file with SECRET_KEY:"", EMAIL_USER:"", EMAIL_PASS:"" and save it


sudo nano django_project/django_project/settings.py
"""
 import json
 with open('/etc/config.json') as config_file:
	config = json.load(config_file)
 SECRET_KEY = config["SECRET_KEY"]
 Debug = False
 EMAIL_HOST_USER = config["EMAIL_USER"]
 EMAIL_HOST_PASSWORD = config["EMAIL_PASSWORD"]
""" # save and exit

sudo ufw delete allow 8000
sudo ufw allow http/tcp
sudo service apache2 restart













